(function(window,undefined){

var modules = {} ;
if( window.$ )
{
	modules['jquery'] = window.$;
}
var require = function(deps, creator) {
    var args = [];
    var global = { window:window };
    var exports = {};
    for( var i in deps )
    {
        var m = deps[i];
        if( m == 'exports')
        {
            args.push(exports);
        }
        else if( modules[m])
        {
            args.push(modules[m]);
        } else if(m.indexOf( '../') == 0 )
        {
            var mm = m.substr(3);
            if( modules[mm])
            {
                args.push(modules[mm]);
            }
        }
    }
    if( window['debug_starx'] == true )
    {
        console.info( args );
    }
    creator.apply( global , args );
};
    modules['require'] = require;

var define = function(what, deps, creator) {

    creator = creator || Object;
    var args = [];
    var creator_this = { window: window};
    var exports = {};
    for( var i in deps )
    {
        var m = deps[i];
        if( m == 'exports')
        {
            args.push(exports);
        }
        else
        {
            args.push(modules[m]);
        }
    }
    var module = creator.apply( creator_this , args );
    modules[what] = module || exports;
    if( window['debug_starx'] == true )
    {
        console.info( "Define module " , what , module, exports );
    }
};
define.amd = true;
define('StarX/main',['require', 'exports', 'jquery'], function (require, exports, $) {
    if( !$ )
    {
        $ = jQuery;
    }
    var widget_ids = {};

    function get_base_url() {
        var module = "StarX/main";
        var module_ext = ".js";
        var base_url = location.protocol + '//starx.mit.edu/';
        if (location.hostname == 'localhost') {
            base_url = 'http://localhost:8002/';
        }

        var main_url;
        var scripts = document.getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
            var script = scripts[i];
            if (script.getAttribute('data-requiremodule') == module) {
                main_url = script.getAttribute('src');
            }
        }
        if (main_url) {
            base_url = main_url.substring(0, main_url.length - module.length - module_ext.length);
        }
        return base_url;
    }

    var base_url = get_base_url(); // 'http://localhost:8002/';

    function parse(str, del) {
        try {
            str = str.replace(new RegExp(del, "g"), '"');
            var json = "{" + str.substr(2, str.length - 4) + "}";
            var data = {};
            try {
                data = JSON.parse(json);
            }
            catch (e) {
                return { "html": "STARX: ERROR PARSING: " + str.substr(2, str.length - 4) + ":ERROR PARSING :STARX", callback: function () {
                } }
            }
            var id = "STARX_" + Math.round(1000000 * Math.random());
            widget_ids[id] = 1;

            data.element_id = id;
            data.base_url = get_base_url();
	    if( data.base_url == '' ) { data.base_url = document.location.origin; }
            function callback() {
                require(['../' + data.StarX + '/main'], function (project) {
                    if (project) {
                        try {
                            if (project.configure) {
                                project.configure(data);
                            }
                            else if (project[data.StarX]) {
                                q = new project[data.StarX]();
                                q.configure(data);
                            }
                        } catch (e) {
                            var config = data;
                            document.getElementById(config.element_id).innerHTML = data.StarX + " has an issue. (" + e + ")";
                        }
                    }
                    else {
                        console.info("Has other");
                        var config = data;
                        document.getElementById(config.element_id).innerHTML = "project " + data.StarX + " not found";
                    }
                });
            };
            return { html: "<span id='" + id + "'></span>", callback: callback };
        } catch (e) {
            return "STARX: ERROR PARSING: " + str.substr(2, str.length - 4) + ":ERROR PARSING :STARX";
        }
    }

    function test_and_add(element, elements) {
        if ($(element).parents().filter('.editor').length == 0) {
            elements.push(element);
        }
    }

    var in_load = false;

    function load(target) {
        load_delimited('"', target);
        load_delimited("'", target);
    }

    function load_delimited(del, target) {
        if (in_load) {
            return;
        }
        in_load = true;
        var elements = [];
        var list = $("*:contains('{[" + del + "StarX" + del + ":')", target);
       // console.info("in load " + del + " ");
       // console.info(target);
       // console.info("in load " + list.length);
        for (var i = 1; i < list.length; i++) {
            if (!list[i - 1].contains(list[i])) {
                test_and_add(list[i - 1], elements);
            }
        }
        if (list.length > 0) {
            test_and_add(list[list.length - 1], elements);
        }
        var callbacks = [];
        $(elements).each(function () {
            var element = $(this);
            var html = element.html();
            if (html != null && html.indexOf(']}') != -1) {
                var matches = html.match('(\\{\\[' + del + 'StarX' + del + ':[^\\]]*\\]\\})');
                var splits = html.split(/(\{\['+del+'StarX'+del+':.*\]\})/);
                var new_html = '';
                for (var i = 0; i < splits.length; i++) {
                    if (splits[i].trim().indexOf('{[' + del + 'StarX' + del + ':') == 0) {
                        var p = parse(splits[i].trim(), del);
                        new_html += p.html;
                        callbacks.push(p.callback);
                    }
                    else {
                        new_html += splits[i];
                    }
                }
                element.html(new_html).ready(function () {
                    $(callbacks).each(function () {
                        if (this instanceof Function) {
                            this();
                        }
                        else {
                            console.info("Failed to operate on callback:" + this);
                        }
                    });
                })
            }

        });
        in_load = false;

    }

    function starx_child(element) {
        if (element) {
            if (element['id'] && widget_ids[ element['id']] == 1) {
                return true;
            }
            if (element.parentElement) {
                return starx_child(element.parentElement);
            }
        }
        return false;
    }

    function bind() {
        $('body').bind('DOMNodeInserted', function (e) {
            if (starx_child(e.target)) {
                return;
            }
            load(e.target);
        });
        load(document.body);
    }

    function init() {
        if (window.STARX_SELECTOR) {
            $(window.STARX_SELECTOR).each(function () {
                var e = this;
                var q = $(e);
                var text = q.text();
                if (q.hasClass('starx_handled')) {
                    return;
                }
                if (text.indexOf("{[") >= 0) {
                    var p = parse(text, '"');

                    q.html(p.html).addClass('starx_handled').ready(function () {
                        p.callback();
                    });
                }
            });
            if (!window.STARX_NO_BIND) {
                bind();
            }
        }
        else {
            bind();
        }
    }

    init();

    exports.load = load;
    exports.init = init;
});

// <!-- Google Analytics -->
(function (window, document, Math) {
    var debug = false;
    var ga = '_Star_TMI_';
    while (window[ga]) {
        ga = '_' + ga + '_' + Math.round(100000 * Math.random());
    }
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date();
        a = s.createElement(o),
            m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', ga);


    window[ga]('create', 'UA-1048253-23', {
        'cookieName': '_Star_TMI_',
        'cookieExpires': 3600 * 24 * 30
    });

    function receiveMessage(event) {
        if (debug) {
            console.info("receiveMessage");
            console.info(event);
        }
        if (event['data'] && event['data']['command'] == 'event') {
            window[ga]('send', event.data.command, event.data.category, event.data.action, event.data.label);
        }
    };

    window.addEventListener('message', receiveMessage, false);
})(window, document, Math);
// <!-- End Google Analytics -->
(function (window, document, undefined) {
    try {
    if (!window['Raven']) {
        var toProcess = [];
        var a = document.createElement('script'),
            m = document.getElementsByTagName('script')[0];
        function process() {
            while( toProcess.length != 0 && window['Raven'])
            {
                var q = toProcess.shift();
                window['Raven'].config(q.a, q.b).install();
                if( q.callback ) {
                    try {
                        q.callback(window['Raven']);
                    }
                    catch(e)
                    {};
                }
            }
        }
        a.async = 1;
        a.onload = process;
        a.src = '//cdn.ravenjs.com/1.1.11/raven.min.js';
        m.parentNode.insertBefore(a, m);
        window.RavenConfigStarX = function (a, b,c) {
            toProcess.push({a:a,b:b,callback:c});
            process();
        }
    }
    }catch(e) {
        if( console && console.info )
        {
            console.info( e );
        }
    };
})(window, document);

define("StarTMI/itmi", function(){});

define('StarTMI/tmi',["require", "exports"], function(require, exports) {
    var TMI = (function () {
        function TMI() {
            this.debug = false;
        }
        TMI.prototype.pageview = function () {
            if (this.debug) {
                console.debug("TMI:pageview");
            }
            var payload = {
                source: '_Star_TMI_',
                command: 'pageview'
            };
            top.window.postMessage(payload, '*');
        };

        TMI.prototype.event = function (category, action, label, value) {
            if (typeof action === "undefined") { action = undefined; }
            if (typeof label === "undefined") { label = undefined; }
            if (typeof value === "undefined") { value = 0; }
            if (this.debug) {
                console.debug("TMI:event c:" + category + " a:" + action + " l:" + label + " v:" + value);
            }
            var payload = {
                source: '_Star_TMI_',
                command: 'event',
                category: category,
                action: action,
                label: label,
                value: value
            };
            top.window.postMessage(payload, '*');
        };

        TMI.prototype.configure_raven = function (a, b, callback) {
            if (window['RavenConfigStarX']) {
                try  {
                    window['RavenConfigStarX'](a, b, callback);
                } catch (e) {
                    console.debug(e);
                }
            } else {
                console.debug('no raven');
            }
        };
        return TMI;
    })();
    exports.TMI = TMI;
});
//# sourceMappingURL=tmi.js.map
;
/// <reference path="../StarX/lib/require.d.ts" />
/// <reference path="../StarX/lib/jquery.d.ts" />
define('StarSimpleText/main',["require", "exports", 'jquery', 'StarTMI/tmi'], function(require, exports, $, StarTMI) {
    

    var tmi = new StarTMI.TMI();

    var StarSimpleText = (function () {
        function StarSimpleText() {
            this.timer = null;
        }
        StarSimpleText.prototype.last_line_break_index = function (val, pos) {
            pos = pos > 0 ? pos - 1 : pos;
            var min_index = 0;
            var nn = val.lastIndexOf("\n", pos);
            if (nn != -1) {
                min_index = nn;
            }
            var rr = val.lastIndexOf("\r", pos);
            if (rr != -1) {
                min_index = min_index > rr ? min_index : rr;
            }
            return min_index;
        };

        StarSimpleText.prototype.last_space_index = function (val, last_index) {
            var ss = val.lastIndexOf(" ", last_index);
            return ss;
        };

        StarSimpleText.prototype.process_change = function (max_iter) {
            var self = this;
            var elem = document.getElementById(self.textarea_id);
            if (elem) {
                var changed = false;
                var val = elem['value'];
                var lines = val.split(/[\n\r]/);
                var new_lines = [];
                for (var i in lines) {
                    var line = lines[i];

                    if (line.length < self.config.cols) {
                        new_lines.push(line);
                        continue;
                    }
                    var iter = 0;
                    var line_processed = false;

                    while (line.length >= self.config.cols && iter < max_iter) {
                        line_processed = false;
                        iter++;
                        var break_point = self.last_space_index(line, self.config.cols);
                        if (break_point == -1 || break_point == 0) {
                            new_lines.push(line);
                            line_processed = true;
                            break;
                        } else {
                            new_lines.push(line.substr(0, break_point));
                            line = line.substr(line.charAt(break_point) == ' ' ? break_point + 1 : break_point);
                            line_processed = false;
                        }
                    }
                    if (!line_processed) {
                        new_lines.push(line);
                    }
                }
                elem['value'] = new_lines.join("\n");
                if (window['starx_debug'] == true) {
                    console.debug("NEW TEXT");
                    console.debug(elem['value']);
                }
            }
        };

        StarSimpleText.prototype.process = function (max_iter) {
            var self = this;
            var elem = document.getElementById(self.textarea_id);
            if (elem) {
                var iter = 0;
                var changed = false;
                var val = elem['value'];
                var pos = val.length;
                if (elem['selectionStart']) {
                    pos = elem['selectionStart'];
                }

                while (iter < max_iter) {
                    iter++;
                    var min_index = self.last_line_break_index(val, pos);
                    if (pos - min_index < self.config.cols) {
                        break;
                    } else {
                        var max_len = min_index + self.config.cols;
                        var break_point = self.last_space_index(val, max_len);
                        if (break_point == -1) {
                            break;
                        } else {
                            val = val.substr(0, break_point) + "\n" + val.substr(val.charAt(break_point) == ' ' ? break_point + 1 : break_point);
                            changed = true;
                        }
                    }
                }
                if (changed) {
                    elem['value'] = val;
                    elem['selectionStart'] = pos;
                    elem['selectionEnd'] = pos;
                    if (window['starx_debug'] == true) {
                        console.debug(val);
                    }
                }
            }
        };

        StarSimpleText.prototype.keyup = function (el, event) {
            this.process(20);
            this.save_to_jshidden();
        };

        StarSimpleText.prototype.change = function (el, event) {
            this.process_change(1000);
            this.save_to_jshidden();
        };

        StarSimpleText.prototype.save_to_jshidden = function () {
            var elem = document.getElementById(this.textarea_id);
            var val = elem['value'];
            var jq = $('[name=' + this.config.state + ']');
            if (this.config['show_length']) {
                jq.show().text(val.length + " characters");
            }
            var ret = $('#' + jq.attr('inputid'));
            ret.attr('value', encodeURI(val));
        };

        StarSimpleText.prototype.get_from_jshidden = function () {
            var jq = $('[name=' + this.config.state + ']');
            var ret = $('#' + jq.attr('inputid'));
            try  {
                return decodeURI(ret.attr('value'));
            } catch (e) {
                if (window['starx_debug'] == true) {
                    console.debug("value can not be decoded, failing back on raw");
                }
                return ret ? ret.attr('value') : '';
            }
        };

        StarSimpleText.prototype.apply_css = function () {
            var elem = document.getElementById(this.textarea_id);
            $(elem).css('min-height', '300px');
        };

        StarSimpleText.prototype.configure = function (config) {
            tmi.event('StarSimpleText', 'Start');
            tmi.configure_raven('https://b71ed16774dd47c896988d743f1ce940@app.getsentry.com/20171', { whitelistUrls: ['mit.edu'] }, function (Raven) {
                if (Raven) {
                    if (config['edx_opts']) {
                        Raven.setUser({ id: $('.user-link').text().replace(/\s*/g, '').replace('Dashboardfor:', '') });
                    }
                }
            });

            this.config = config;
            var self = this;
            var top = $('#' + config.element_id);
            var text = '';
            try  {
                text = this.get_from_jshidden();
            } catch (e) {
                if (window['starx_debug'] == true) {
                    console.debug(e);
                }
            }
            self.textarea_id = config.element_id + "_textarea";
            config.cols = config.cols ? parseInt(config.cols) : 80;
            config.rows = config.rows ? parseInt(config.rows) : 25;
            var textarea = '<textarea id="' + self.textarea_id + '" cols="' + config.cols + '" rows="' + config.rows + '">' + text + '</textarea>';
            top.html(textarea);
            $('#' + self.textarea_id).off('keyup').off('change').off('blur').on('keyup', function (e) {
                self.keyup(this, e);
            }).on('change', function (e) {
                self.change(this, e);
            }).on('blur', function (e) {
                self.change(this, e);
            }).ready(function () {
                self.apply_css();
            });
        };
        return StarSimpleText;
    })();
    exports.StarSimpleText = StarSimpleText;
});
//# sourceMappingURL=main.js.map
;
define('SST',['StarX/main', 'StarTMI/itmi','StarSimpleText/main'], function ( main, itmi, simple) {
	var parentList = document.getElementsByClassName("starx_widget");
	for( var index = 0 ; index < parentList.length ; index++ )
	{
		var element = parentList[index];
		if( element && element.className && element.className.indexOf('starx_handled')==-1 && element.textContent.indexOf( '"StarX":"StarSimpleText"' ) != -1)
		{
			main.load( element.parentElement );
		}
	}
});
require(['SST'], function(q) {} ) ;


define("main", function(){});

//# sourceMappingURL=main.js.map    // here goes content

})(window);
